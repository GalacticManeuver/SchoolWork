#include "GameController.h"
#include "Card.h"
#include "myBag.h"
#include "Fight.h"
#include "Hand.h"
#include <iostream>
#include <cstdlib>
#include <fstream>
#include <string>
using namespace std;



/** randomly generates the name, cost, power, and toughness of cards, as well as
  a best card, and puts them in a file.
  @param filename   the name of the file that's created/replaced
  @post   a text file is created/replaced that has the name, cost, power, and
    toughness randomly generated, along with a best card.
*/
void GameController::generateCards(const char* filename) const {
  ofstream fout;

  fout.open(filename);

  int i = 0;
  int a = rand() % 10 + 6;

  string str[21];
  str[0] = "opponent";
  str[1] = "one";
  str[2] = "two";
  str[3] = "three";
  str[4] = "four";
  str[5] = "five";
  str[6] = "six";
  str[7] = "seven";
  str[8] = "eight";
  str[9] = "nine";
  str[10] = "ten";
  str[11] = "eleven";
  str[12] = "twelve";
  str[13] = "thirteen";
  str[14] = "fourteen";
  str[15] = "fifteen";
  str[16] = "sixteen";
  str[17] = "seventeen";
  str[18] = "eightteen";
  str[19] = "nineteen";
  str[20] = "twenty";

  //generating opponent
  /*
  fout << str[0] << ',' << rand() % 10 << ',' << rand() % 50 + 25 << ',' << rand() % 50 + 25 << endl;
  */
  fout << str[0] << ',' << 8 << ',' << 72 << ',' << 69 << endl;

  //generating 5-15 random cards
  for(i = 0; i < a; ++i) {
    fout << str[i+1] << ',' << rand() % 10 << ',' << rand() % 100 << ',' << rand() % 100 << endl;
  }//for

  //inserting the best card
  fout << "***best***,0,110,110" << endl;

  //generating more random cards until there are 20 random cards (21 cards total)
  for(; i < 20; ++i) {
    fout << str[i+1] << ',' << rand() % 10 << ',' << rand() % 100 << ',' << rand() % 100 << endl;
  }//for

  fout.close();
}//generateCards



/** interprets a string of numbers as an int.
  @param input   a string, it's assumed that this string only has numbers.
  @return   an int equivalent to the number represented by the string.
*/
int GameController::stringToNumber(const string input) const {
  int number = 0;

  for(int i = 0; i < input.length(); ++i) {
    number *= 10;
    number += input[i] - 48;
  }

  return number;
}//stringToNumber



/** inputs the cards generated by generateCards into Hand target and Card opponent.
  @param filename   the name of the file being accessed.
  @param target   a pointer to the Hand Cards are being added to.
  @param opponent   a pointer to the Card that is getting its value set.
  @pre   a file that has been generated by generateCards
  @post   Hand target has Cards added to it, and Card opponent's value is set.
  @return   return true if the opponent's card is set, and false if the file isn't good().
*/
bool GameController::readGeneratedCards(const char* filename) {
  ifstream fin;
  string data;
  string subData;
  Card temp;
  int i = 0;
  int manaCost[7] = { 0 };


  fin.open(filename);
  if(fin.good()) {
    fin >> data;

    for(i = 0; i < data.length() && data[i] != ','; ++i)
      subData += data[i];
    opponent.setCardName(subData.c_str());
    subData = "";

    for(++i; i < data.length() && data[i] != ','; ++i)
      subData += data[i];
    manaCost[6] = stringToNumber(subData);
    opponent.setManaCost(manaCost);
    subData = "";
    manaCost[6] = 0;


    for(++i; i < data.length() && data[i] != ','; ++i)
      subData += data[i];
    opponent.setPower(stringToNumber(subData));
    subData = "";

    for(++i; i < data.length() && data[i] != ','; ++i)
      subData += data[i];
    opponent.setToughness(stringToNumber(subData));
    opponent.setCurrentHP(stringToNumber(subData));
    subData = "";
    opponent.setCardType(1);
	opponent.setCardKeyWords("Creature");
  }//if
  else
    return false;

  while(!fin.eof()) {
    fin >> data;
    if(fin.eof())
      break;

    for(i = 0; i < data.length() && data[i] != ','; ++i)
      subData += data[i];
    temp.setCardName(subData.c_str());
    subData = "";

    for(++i; i < data.length() && data[i] != ','; ++i)
      subData += data[i];
    manaCost[6] = stringToNumber(subData);
    temp.setManaCost(manaCost);
    subData = "";
    manaCost[6] = 0;


    for(++i; i < data.length() && data[i] != ','; ++i)
      subData += data[i];
    temp.setPower(stringToNumber(subData));
    subData = "";


    for(++i; i < data.length() && data[i] != ','; ++i)
      subData += data[i];
    temp.setToughness(stringToNumber(subData));
    temp.setCurrentHP(stringToNumber(subData));
    subData = "";

    temp.setCardType(1);
	temp.setCardKeyWords("Creature");
    player1.recieve(temp);
  }

  fin.close();
  return true;
}//readGeneratedCards



/** uses player1's appendHandToFile method.
  @post   all cards in hand are printed to file.
*/
void GameController::appendPlayer1HandToFile(const char* filename) const {
  player1.appendHandToFile(filename);
}//appendPlayer1HandToFile

/** uses opponents appendCardToFile method.
  @post   the opponent card is append to file.
*/
void GameController::appendOpponentCardToFile(const char* filename) const {
  opponent.appendCardToFile(filename);
}//appendPlayer1HandToFile


/** uses player1's sorting functions to sort the hand
  @param sortType   sortType indicates which sorting method to use.
  @post   the Hand is sorted against the target card.
*/
void GameController::sortPlayer1By(const int sortType) {
  if(sortType == 1)
    player1.sortByCounteringOffensive(opponent);

  else if(sortType == 2)
    player1.sortByCounteringDefensive(opponent);
  
}//sortPlayer1By
